// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  previewFeatures = ["relationJoins"]
}

datasource db {
  provider = "sqlite"
  url      = "file:./data.db"
}

model MasterDocuments {
  id               Int    @id @default(autoincrement())
  uuid             String @default(uuid())
  documentPath     String
  documentDownload String

  type String
  use  String

  user             User[] @relation(name: "profile")
  wallpaper        User[] @relation(name: "wallpaper")
}

model MasterSubscriptions {
  id          Int    @id @default(autoincrement())
  name        String @unique
  description String
  limitSensei      Int
  users       User[]
}

model MasterLevels {
  id          Int    @id @default(autoincrement())
  name        String @unique
  description String
  users       User[]
}

model User {
  id       Int    @id @default(autoincrement())
  name     String
  lastname String
  password String
  email    String 
  username String 

  coin Int @default(3)

  createAt     DateTime  @default(now())
  updateAt     DateTime  @updatedAt
  last_session DateTime?

  rol String @default("USER")

  profilePhotoId        Int?
  profilePhotoReference MasterDocuments?    @relation(name: "profile", fields: [profilePhotoId], references: [id])

  wallpaperPhotoId        Int?
  wallpaperPhotoReference MasterDocuments?  @relation(name: "wallpaper", fields: [profilePhotoId], references: [id])

  subscriptionId          Int?
  subscriptionReference   MasterSubscriptions? @relation(fields: [subscriptionId], references: [id])

  levelId        Int?
  levelReference MasterLevels? @relation(fields: [levelId], references: [id])

  // relations
  session         Session[]
  notifications   Notification[]
  senseis         Sensei[]
  games           Game[]
}

model Session {
  id Int @id @default(autoincrement())

  startSession DateTime
  endSession   DateTime?

  token String

  userId        Int
  userReference User @relation(fields: [userId], references: [id])
}

model Notification {
  id                Int         @id           @default(autoincrement())
  userId            Int
  userReference     User        @relation(fields: [userId], references: [id])
  content           String
  redirect          String      @default("")
  type              String
  by                String
  read              Boolean     @default(false)

  createAt          DateTime  @default(now())
}

model Game {
  id          Int       @id     @default(autoincrement())
  gameName    String    @unique
  devices     String
  userId      Int     
  userAccount User      @relation(fields: [userId], references: [id])
}

model Sensei {
  id                Int        @id           @default(autoincrement())
  name              String
  tema              String

  userId            Int
  userReference     User      @relation(fields: [userId], references: [id])

  createAt          DateTime  @default(now())
  updateAt          DateTime  @updatedAt
  deleteAt          DateTime?

  propmsQuery       SenseiChat[]  
}

model SenseiChat {
  id                Int       @id       @default(autoincrement())
  message           String
  origin            Boolean
  createAt          DateTime    @default(now())
  senseiId          Int
  senseiReference   Sensei    @relation(fields: [senseiId], references: [id])
}
